"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var lib_1 = require("tslint/lib");
var rules_1 = require("tslint/lib/rules");
var typescript_1 = require("typescript");
var ngWalker_1 = require("./angular/ngWalker");
var utils_1 = require("./util/utils");
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var walker = new Walker(sourceFile, this.getOptions());
        return this.applyWithWalker(walker);
    };
    Rule.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && this.ruleArguments.every(function (ruleArgument) { return !!(typeof ruleArgument === 'string' && ruleArgument.trim()); });
    };
    Rule.metadata = {
        description: 'Ensures that decorators are on the same line as the property/method it decorates.',
        descriptionDetails: 'See more at https://angular.io/guide/styleguide#style-05-12.',
        hasFix: true,
        optionExamples: [true, [true, utils_1.Decorators.HostListener], [true, utils_1.Decorators.Input, 'MyCustomDecorator']],
        options: {
            items: [
                {
                    type: 'string'
                }
            ],
            type: 'array'
        },
        optionsDescription: 'A list of blacklisted decorators.',
        rationale: 'Placing the decorator on the same line usually makes for shorter code and still easily identifies the property/method.',
        ruleName: 'prefer-inline-decorator',
        type: 'style',
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = 'Consider placing decorators on the same line as the property/method it decorates';
    return Rule;
}(rules_1.AbstractRule));
exports.Rule = Rule;
var Walker = (function (_super) {
    __extends(Walker, _super);
    function Walker(source, options) {
        var _this = _super.call(this, source, options) || this;
        _this.blacklistedDecorators = new Set(options.ruleArguments);
        return _this;
    }
    Walker.prototype.visitMethodDecorator = function (decorator) {
        this.validateDecorator(decorator);
        _super.prototype.visitMethodDecorator.call(this, decorator);
    };
    Walker.prototype.visitPropertyDecorator = function (decorator) {
        this.validateDecorator(decorator);
        _super.prototype.visitPropertyDecorator.call(this, decorator);
    };
    Walker.prototype.validateDecorator = function (decorator) {
        var decoratorName = utils_1.getDecoratorName(decorator);
        if (!decoratorName)
            return;
        var isDecoratorBlacklisted = this.blacklistedDecorators.has(decoratorName);
        if (isDecoratorBlacklisted)
            return;
        var decoratorStartPos = decorator.getStart();
        var property = decorator.parent;
        if (!property || !typescript_1.isPropertyDeclaration(property))
            return;
        var propertyStartPos = property.name.getStart();
        if (utils_1.isSameLine(this.getSourceFile(), decoratorStartPos, propertyStartPos))
            return;
        var fix = lib_1.Replacement.deleteFromTo(decorator.getEnd(), propertyStartPos - 1);
        this.addFailureAt(decoratorStartPos, property.getWidth(), Rule.FAILURE_STRING, fix);
    };
    return Walker;
}(ngWalker_1.NgWalker));
